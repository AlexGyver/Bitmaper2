import { parseMD } from "@alexgyver/utils";

export const help_text = parseMD(`Bitmaper - программа для преобразования изображений в бинарный вид для вывода на дисплей и трассировки на ЧПУ

## Основные возможности
- Загрузка картинки файлом, по ссылке или из буфера обмена
- Поддержка перемещения и масштаба с тачскрина
- Поддержка пакетной обработки (только для файлов)
- Встроенный редактор: изменение размера, обрезка, поворот, набор фильтров
- Несколько алгоритмов кодирования
- Вывод в буфер обмена, в файл .h, в бинарный файл или отправка на HTTP сервер

### Последовательность работы
1. Загрузить изображение файлом (можно перетащить в поле), по ссылке или вставить из буфера
2. Настроить размер, позицию кадра (перемещение курсором, масштаб щипком или колесом мыши), фильтры
3. Выбрать режим кодирования
4. Нажать **Encode**
5. Забрать результат, нажав на нужную кнопку (копировать, сохранить как .h файл итд)

### Массовая конвертация
- Для пакетной обработки нужно выбрать или перетащить несколько файлов в поле выбора файла, на превью отобразится первый файл
- При нажатии на **Encode** все файлы обработаются по порядку с настройками первого файла (позиция, фильтры итд)
- Результат будет доступен только в текстовом виде (копировать или .h файл), в нём будут все изображения и список указателей

## Обработка
### Редактор
В моно режимах клик по превью (нижнее окно) инвертирует пиксель под курсором.

### Фильтры
- **Black Background**: подкладывает чёрный фон под исходное изображение (нужно если оно имеет тёмный фон)
- **Brightness, Contrast, Saturation**: яркость, контраст, насыщенность
- **Blur**: размытие
- **Mask**: выделение цвета на изображении, результат - маска в градациях серого
  - **Color**: целевой цвет. На десктопной версии можно выбрать "пипеткой" по превью. Чтобы использовать пипетку при активном фильтре, нужно сначала отключить фильтр, чтобы изображение обратно стало цветным
  - **Tolerance**: допуск цвета. Чем больше - тем менее похожие цвета попадут в маску
  - **Amplify**: усиление маски (делает результат более ярким)
- **Gray Filters**: блок серых фильтров, при активации изображение переводится в градации серого
  - **Edges Simple**: простое усиление краёв
  - **Edges Sobel**: выделение краёв по алгоритму Sobel
  - **Dithering**: dithering
  - **Threshold**: перевод в ч/б с заданным порогом
  - **Edges Median**: выделение краёв (ширина 1 пиксель)
  - **Invert**: инвертирование

### Алгоритмы кодирования

- **1 pix/byte**: моно, 1 пиксель в байте, строками слева направо сверху вниз, [p0, ...pn]
- **8x Horizontal**: моно, 8 пикселей в байте горизонтально (MSB слева), строками слева направо сверху вниз, [p0, ...pn]
- **8x Vertical Col**: моно, 8 пикселей в байте вертикально (MSB снизу), столбцами сверху вниз слева направо, [p0, ...pn]
- **8x Vertical Row**: моно, 8 пикселей в байте вертикально (MSB снизу), строками слева направо сверху вниз, [p0, ...pn] Подходит для GyverOLED
- **GyverGFX Image**: программа выберет лёгкий между BitMap и BitPack, [0 map | 1 pack, x, x, x, x, p0, ...pn]
- **GyverGFX BitMap**: моно, 8 пикселей вертикально (MSB снизу), столбцами сверху вниз слева направо, [widthLSB, widthMSB, heightLSB, heightMSB, p0, ...pn]
- **GyverGFX BitPack**: моно, сжатый RLE формат, [widthLSB, widthMSB, heightLSB, heightMSB, p0, ...pn]
- **Grayscale**: оттенки серого, 1 пиксель в байте, [p0, ...pn]
- **RGB24**: цветной, 1 пиксель на 4 байта, [p0, ...pn], тип uint32_t
- **RGB888**: цветной, 1 пиксель на 3 байта (24 бит RGB) [r0, g0, b0, ...]
- **RGB565**: цветной, 1 пиксель на 2 байта (16 бит RGB) [rrrrrggggggbbbbb, ...] тип uint16_t
- **RGB233**: цветной, 1 пиксель в байте (8 бит RGB) [rrgggbbb, ...]
- **ASCII**: кодирование символами
`);